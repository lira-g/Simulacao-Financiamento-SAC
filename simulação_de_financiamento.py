# -*- coding: utf-8 -*-
"""SIMULAÇÃO DE FINANCIAMENTO

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xRoUGTt1k_sLir5r1aDnxLKpNV5M9ckk
"""

# FINANCIAMENTO: AMORTIZAÇÃO, DEPRECIAÇÃO, SALDO DEVEDOR, JUROS, PARCELAS

import pandas as pd

bem = input("Digite o bem desejado (Carro ou Imóvel): ")
taxa_1 = float(input("Digite a taxa de juros anual (%): "))
parcelas = int(input("Digite a quantidade de parcelas que deseja para o financiamento: "))

taxa = taxa_1/100

valor_total = float(input(f"Digite o valor do {bem}: R$ "))

pa, pr, am, ju, sa, de = [""], [""], [""], [""], [], []

pres,jur,amor = [], [], []


sa.append(f"R$ {valor_total: .2f}")
de.append(f"R$ {valor_total: .2f}")

juros_mensal = pow(1.0 + taxa, 1.0 / 12) - 1.0
amortizacao = valor_total/parcelas
saldo_final = valor_total
depreciacao = valor_total

for t in range(1, parcelas + 1):

  saldo_final += - amortizacao
  juros = juros_t(t, parcelas, amortizacao, juros_mensal)
  prestacao = amortizacao + juros
  
  if bem == "Carro":
    depreciacao += - valor_total*((20/12)/100)
  else:
    depreciacao += - valor_total*((4/12)/100)  


  pa.append(f"{t}°")
  pr.append(f"R$ {prestacao: .2f}")
  am.append(f"R$ {amortizacao: .2f}")
  ju.append(f"R$ {juros: .2f}")
  sa.append(f"R$ {saldo_final: .2f}")
  de.append(f"R$ {depreciacao: .2f}")

  pres.append(prestacao)
  jur.append(juros)
  amor.append(amortizacao)

def juros_t(t, n, amortizacao, juros_mensal):
      return (n - t + 1) * amortizacao * juros_mensal

soma_pres = sum(pres)
soma_jur = sum(jur)
soma_amor = sum(amor)

df = pd.DataFrame({
  "Parcela": pa,
  "Prestação": pr,
  "Amortização": am,
  "Juros": ju,
  "Saldo Devedor": sa,
  "Valor Depreciado": de
})


print(f"Bem desejado: {bem} \n")
print(f"taxa de juros anual: {taxa_1} % \n")
print(f"Valor do {bem}: R${valor_total: .2f} \n")
print(df)
print(f"\nValor total de Prestação R${soma_pres: .2f}\n")
print(f"Valor total de Amortização R${soma_amor: .2f}\n")
print(f"Valor total de Juros R${soma_jur: .2f}")


#------------------------GRAFICO DE LINHA--------------------------#


import numpy as np
import matplotlib.pyplot as plt


x = np.arange(1, parcelas + 1) 
y = jur

plt.scatter(x, y, color = 'red')

plt.xlabel("Parcelas")
plt.ylabel("Juros")
plt.title("Juros por Parcela")

fig = plt.gcf()
fig.set_size_inches(8, 6)

plt.plot(x, y)


#------------------------GRAFICO DE SETORES--------------------------#

labels = "Juros", "Amortização"
sizes = [soma_jur, soma_amor]

fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(aspect="equal"))

def func(pct, allvals):
    absolute = int(pct/100.*np.sum(allvals))
    return "{:.1f}%\n(R${:d})".format(pct, absolute)

wedges, texts, autotexts = ax.pie(sizes, autopct=lambda pct: func(pct, sizes),
                                  textprops=dict(color="w"))

ax.legend(wedges, labels,
          title="Frações",
          loc="center left",
          bbox_to_anchor=(1, 0, 0.5, 1))

plt.setp(autotexts, size=8, weight="bold")

ax.set_title(f"Gráfico da fração de Juros e Amortização da Prestação total (Prestação total = R${soma_pres: .2f})")

plt.show()